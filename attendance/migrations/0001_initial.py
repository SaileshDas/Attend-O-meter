# Generated by Django 5.2.1 on 2025-05-30 15:41

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AcademicSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='e.g., Odd Semester 2024-2025', max_length=100)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('is_current', models.BooleanField(default=False, help_text='Is this the active session for the user?')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='academic_sessions', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ExamDate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('exam_type', models.CharField(choices=[('mid_sem', 'Mid-Semester'), ('end_sem', 'End-Semester')], help_text='Type of exam (Mid-Semester or End-Semester)', max_length=50)),
                ('start_date', models.DateField()),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='exam_dates', to='attendance.academicsession')),
            ],
            options={
                'ordering': ['start_date'],
            },
        ),
        migrations.CreateModel(
            name='Subject',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('code', models.CharField(blank=True, help_text='e.g., CS301', max_length=20, null=True)),
                ('classes_per_week', models.PositiveIntegerField(help_text='Number of classes (lectures/tutorials) for this subject per week.')),
                ('minimum_attendance_percentage', models.DecimalField(decimal_places=2, default=75.0, help_text='Minimum attendance required (e.g., 75.00 for 75%)', max_digits=5)),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subjects', to='attendance.academicsession')),
            ],
        ),
        migrations.CreateModel(
            name='AttendanceRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('classes_conducted', models.PositiveIntegerField(default=1, help_text='Number of classes conducted on this date for the subject.')),
                ('classes_attended', models.PositiveIntegerField(default=0, help_text='Number of classes attended by the student on this date for the subject.')),
                ('subject', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attendance_records', to='attendance.subject')),
            ],
            options={
                'ordering': ['-date'],
            },
        ),
        migrations.AddConstraint(
            model_name='academicsession',
            constraint=models.UniqueConstraint(condition=models.Q(('is_current', True)), fields=('user',), name='unique_current_session'),
        ),
        migrations.AlterUniqueTogether(
            name='academicsession',
            unique_together={('user', 'is_current')},
        ),
        migrations.AlterUniqueTogether(
            name='examdate',
            unique_together={('session', 'exam_type')},
        ),
        migrations.AlterUniqueTogether(
            name='subject',
            unique_together={('session', 'name')},
        ),
        migrations.AlterUniqueTogether(
            name='attendancerecord',
            unique_together={('subject', 'date')},
        ),
    ]
